amcl:
  ros__parameters:
    use_sim_time: false  # Set to true if using simulation
    base_frame_id: "base_footprint"  # Base frame of robot
    odom_frame_id: "odom"
    global_frame_id: "map"
    laser_model_type: "likelihood_field"
    scan_topic: "scan"
    min_particles: 800           # Min particle count for accurate localization
    max_particles: 1500          # Max particle count (balance accuracy & speed)
    alpha1: 0.2                 # Odometry noise params (rotation)
    alpha2: 0.2                 # Odometry noise params (translation)
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.1                 # Resample threshold
    update_min_a: 0.2           # Min angle update for filter
    update_min_d: 0.25          # Min distance update
    z_hit: 0.7                  # Weight for hit measurement model
    z_short: 0.05               # Short reading weight
    z_max: 0.05
    z_rand: 0.2

bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: "map"
    robot_base_frame: "base_footprint"
    odom_topic: "/odom"
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
    default_bt_xml_filename: "navigate_to_pose_w_replanning_and_recovery.xml"
    bt_loop_duration: 20
    default_server_timeout: 20

controller_server:
  ros__parameters:
    use_sim_time: false
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.01
    min_y_velocity_threshold: 0.0     # Differential drive - no lateral motion
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.2    # Robot must move 20cm to be considered progressing
      movement_time_allowance: 10.0
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.20          # 20cm goal tolerance for position
      yaw_goal_tolerance: 0.20         # ~11 degrees tolerance for heading
      stateful: true
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: false
      min_vel_x: 0.0
      max_vel_x: 1.0                   # Max linear velocity 1 m/s (Segway RMP 401 spec)
      min_vel_y: 0.0                   # No lateral movement
      max_vel_y: 0.0
      max_vel_theta: 0.6               # Max angular velocity limited for smooth turning
      min_speed_xy: 0.0
      max_speed_xy: 1.0
      min_speed_theta: 0.0
      acc_lim_x: 1.0                   # Linear acceleration limit
      acc_lim_y: 0.0
      acc_lim_theta: 0.4               # Angular acceleration limited due to robot constraints
      decel_lim_x: -1.0
      decel_lim_y: 0.0
      decel_lim_theta: -0.4
      vx_samples: 15
      vy_samples: 1                   # No lateral movement
      vtheta_samples: 15              # Angular velocity samples for smooth turns
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.20
      trans_stopped_velocity: 0.1
      short_circuit_trajectory_evaluation: true
      stateful: true
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 30.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 25.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 30.0
      GoalDist.scale: 25.0
      RotateToGoal.scale: 30.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: false
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: "odom"
      robot_base_frame: "base_footprint"
      rolling_window: true
      width: 4.0                    # 4 meter x 4 meter window for local obstacles
      height: 4.0
      resolution: 0.05             # 5cm grid resolution
      robot_radius: 0.35           # Radius around robot for costmap inflation
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.5   # Reduced cost scaling to allow tighter navigation
        inflation_radius: 0.4      # Reduced inflation radius for less conservative obstacle expansion
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        publish_voxel_map: true
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: "scan"
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: false
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: "map"
      robot_base_frame: "base_footprint"
      robot_radius: 0.35
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: "scan"
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.5
        inflation_radius: 0.4

planner_server:
  ros__parameters:
    use_sim_time: false
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: true  # Enable A* planner for better path efficiency

behavior_server:
  ros__parameters:
    use_sim_time: false
    costmap_topic: "local_costmap/costmap_raw"
    footprint_topic: "local_costmap/published_footprint"
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "back_up", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
      max_rotational_vel: 0.6
      min_rotational_vel: 0.3
      rotational_acc_lim: 0.4
    back_up:
      plugin: "nav2_behaviors::BackUp"
      backup_distance: 0.5
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"

velocity_smoother:
  ros__parameters:
    use_sim_time: false
    max_vel_x: 1.0                   # Match max velocity of robot
    max_vel_theta: 0.6               # Max angular velocity limit
    min_vel_x: 0.0
    min_vel_theta: -0.6
    acc_lim_x: 1.0                   # Acceleration limits
    acc_lim_theta: 0.4
    decel_lim_x: -1.0
    decel_lim_theta: -0.4
    velocity_timeout: 1.0
    feedback: "OPEN_LOOP"

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20
    stop_on_failure: true
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      waypoint_pause_duration: 5  # Pause 5 seconds at each waypoint to stabilize sensor data

map_server:
  ros__parameters:
    yaml_filename: ""  # Replace with your map file path
    use_sim_time: false

